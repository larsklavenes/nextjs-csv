import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import ButtonDownload from '@/pages/components/ButtonDownload'
import { API_URL } from './constants'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  return (
    <>
      <Head>
        <title>CSV download example</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.header}>
          <h1 className={inter.className}>CSV Download</h1>
          <p className={inter.className}>Click the buttons to download mock CSV files generated on-demand.</p>
        </div>
        <div className={styles.center}>
          <div className={styles.grid}>
            <a
              href={`${API_URL}?fileName=direct-export-1k.csv&records=1000`}
              className={styles.card}
              download
            >
              <h2 className={inter.className}>
                Direct download
              </h2>
              <p className={inter.className}>
                1k records &middot; 400kb
              </p>
            </a>

            <a
              href={`${API_URL}?fileName=direct-export-10k.csv&records=10000`}
              className={styles.card}
              download
            >
              <h2 className={inter.className}>
                Direct download
              </h2>
              <p className={inter.className}>
                10k records &middot; 4mb
              </p>
            </a>

            <a
              href={`${API_URL}?fileName=direct-export-100k.csv&records=100000`}
              className={styles.card}
              download
            >
              <h2 className={inter.className}>
                Direct download
              </h2>
              <p className={inter.className}>
                100k records &middot; 40mb
              </p>
            </a>

            <a
              href={`${API_URL}?fileName=direct-export-1m.csv&records=1000000`}
              className={styles.card}
              download
            >
              <h2 className={inter.className}>
                Direct download
              </h2>
              <p className={inter.className}>
                1m records &middot; 400mb
              </p>
            </a>

            <ButtonDownload fileName="fetched-export-1k.csv" records={1000}>1k records &middot; 400kb</ButtonDownload>
            <ButtonDownload fileName="fetched-export-10k.csv" records={10000}>10k records &middot; 4mb</ButtonDownload>
            <ButtonDownload fileName="fetched-export-100k.csv" records={100000}>100k records &middot; 40mb</ButtonDownload>
            <ButtonDownload fileName="fetched-export-1m.csv" records={1000000}>1m records &middot; 400mb</ButtonDownload>
          </div>
        </div>

        <details className={`${inter.className} ${styles.details}`}>
          <summary>What is this?</summary>
          <div>
            <dl className={`${inter.className} ${styles.description}`}>
              <dt>Direct download</dt>
              <dd>
                <ol>
                  <li>Uses <code className={styles.code}>&lt;a href=&quot;${API_URL}/&quot; download&gt;</code> to GET a filestream blob from the API</li>
                  <li>The browser automatically downloads the recognised file.</li>
                </ol>
              </dd>
              <dt>Fetch download</dt>
              <dd>
                <ol>
                  <li>Uses <code className={styles.code}>fetch</code> to GET a filestream blob from the API</li>
                  <li>Transforms the blob to an object URL with <code className={styles.code}>URL.createObjectURL</code></li>
                  <li>Downloads the object URL by programmatically clicking a temporary hidden download link generated in the browser.</li>
                </ol>
              </dd>
            </dl>
            <p>Both approaches use the same API.</p>
            <p>Only the <strong>Fetch download</strong> approach can display a UI loading state as it gives the browser full control over the request promise.</p>
          </div>
        </details>
      </main>
    </>
  )
}
